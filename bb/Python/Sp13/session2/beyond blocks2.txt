Last login: Tue May  7 16:33:57 on ttys000
Mountain-Duo:~ Michael$ python
Python 2.7.2 (default, Oct 11 2012, 20:14:37) 
[GCC 4.2.1 Compatible Apple Clang 4.0 (tags/Apple/clang-418.0.60)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
>>> 
KeyboardInterrupt
>>> ^D
Mountain-Duo:~ Michael$ python3
Python 3.3.1 (v3.3.1:d9893d13c628, Apr  6 2013, 11:07:11) 
[GCC 4.2.1 (Apple Inc. build 5666) (dot 3)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
>>> print(“hello world”) 
  File "<stdin>", line 1
    print(“hello world”) 
                 ^
SyntaxError: invalid character in identifier
>>> print(“hello world”)
  File "<stdin>", line 1
    print(“hello world”)
                 ^
SyntaxError: invalid character in identifier
>>> print(“hello world”)
  File "<stdin>", line 1
    print(“hello world”)
                 ^
SyntaxError: invalid character in identifier
>>> print("hello world")
hello world
>>> print()

>>> print("this is a sentence")
this is a sentence
>>> print
<built-in function print>
>>> sum
<built-in function sum>
>>> sum()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: sum expected at least 1 arguments, got 0
>>> sum(1,3,4)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: sum expected at most 2 arguments, got 3
>>> sum(1,3)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'int' object is not iterable
>>> 1 + 3
4
>>> var = 123
>>> var
123
>>> var = "hello"
>>> var
'hello'
>>> l = [1, 2, 3]
>>> l
[1, 2, 3]
>>> sum(l)
6
>>> exit()
Mountain-Duo:~ Michael$ cd ~/Dropbox/CS10-Sp13/Beyond\ Blocks/Python/Sp13/session1/
Mountain-Duo:session1 Michael$ python3 bb_session1.py 
Hello! Welcome to Beyond Blocks Session 1!

Today, we're going to learn about Python!	Yay!


Did you know that factorial(5) is 120?!
Oh, by the way, my name is  Michael .

Actually, my full name is  Michael Ball .

Let's count down from 10!
10
9
8
7
6
5
4
3
2
1
Wow!
 Let's do it again!
10
9
8
7
6
5
4
3
2
1
0
But let's see it a 3rd way!
10
9
8
7
6
5
4
3
2
1
2.5
2
1
25
4
Whoa...wat
None
Let's learn powers of 2!
4
x
1
2
4
8
And some more! How high can you go?
1
2
4
8
16
32
64
128
256
512
1024
2048
4096
8192
16384
32768
65536
131072
262144
524288
1048576
2097152
4194304
8388608
Who likes pie? I can eat lots!
3.141592653589793
Mountain-Duo:session1 Michael$ python3
Python 3.3.1 (v3.3.1:d9893d13c628, Apr  6 2013, 11:07:11) 
[GCC 4.2.1 (Apple Inc. build 5666) (dot 3)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
>>> def
  File "<stdin>", line 1
    def
      ^
SyntaxError: invalid syntax
>>> def function(x, y):
...     return x + y
... 
>>> function(1,2)
3
>>> p = print
>>> p("Hi")
Hi
>>> "print"
'print'
>>> 'print'
'print'
>>> 'Michael's name is Michael'
  File "<stdin>", line 1
    'Michael's name is Michael'
             ^
SyntaxError: invalid syntax
>>> "Michael's name is Michael"
"Michael's name is Michael"
>>> var
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'var' is not defined
>>> var =4
>>> 
>>> 
>>> var
4
>>> name
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'name' is not defined
>>> print = 2
>>> print(2)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'int' object is not callable
>>> print("2")
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'int' object is not callable
>>> exit()
Mountain-Duo:session1 Michael$ python3
Python 3.3.1 (v3.3.1:d9893d13c628, Apr  6 2013, 11:07:11) 
[GCC 4.2.1 (Apple Inc. build 5666) (dot 3)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
>>> if (var = 5):
  File "<stdin>", line 1
    if (var = 5):
            ^
SyntaxError: invalid syntax
>>> var = 5
>>> var
5
>>> var == 5
True
>>> if (var = 5):
  File "<stdin>", line 1
    if (var = 5):
            ^
SyntaxError: invalid syntax
>>> var < 5
False
>>> var > 5
False
>>> var <= 5
True
>>> vsr >= 5
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'vsr' is not defined
>>> var >= 5
True
>>> var = var + 1
>>> var
6
>>> var += 2
>>> var 
8
>>> var + 4
12
>>> var
8
>>> var -=2
>>> var
6
>>> var *= 5
>>> var
30
>>> var /= 5
>>> var
6.0
>>> 5/5
1.0
>>> name = "michael"
>>> name
'michael'
>>> name += " ball"
>>> name
'michael ball'
>>> name * 3
'michael ballmichael ballmichael ball'
>>> name / 3
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: unsupported operand type(s) for /: 'str' and 'int'
>>> bool(1)
True
>>> bool(2)
True
>>> bool(0)
False
>>> bool(-8)
True
>>> bool(None)
False
>>> bool("")
False
>>> bool("a")
True
>>> bool([])
False
>>> chr(1)
'\x01'
>>> chr(48)
'0'
>>> chr(97)
'a'
>>> ord('a')
97
>>> list 
<class 'list'>
>>> list()
[]
>>> l = [1, 3, 5]
>>> l[0]
1
>>> l[2]
5
>>> len(l)
3
>>> index = 0
>>> while (index < len(l)):
...     print(l[index])
...     index += 1
... 
1
3
5
>>> index
3
>>> range(10)
range(0, 10)
>>> list(range(10))
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
>>> list(range(len(l)))
[0, 1, 2]
>>> for i in range(len(l)):
...     print(l[i])
... 
1
3
5
>>> for iten in l:
...     print(item)
... 
Traceback (most recent call last):
  File "<stdin>", line 2, in <module>
NameError: name 'item' is not defined
>>> for item in l:
...     print(item)
... 
1
3
5
>>> for i in range(1,len(l)):
...     print(l[i])
... 
3
5
>>> l[0]
1
>>> l[0:1]
[1]
>>> l[0:2]
[1, 3]
>>> l[0:3]
[1, 3, 5]
>>> l[0:3:2]
[1, 5]
>>> help()

Welcome to Python 3.3!  This is the interactive help utility.

If this is your first time using Python, you should definitely check out
the tutorial on the Internet at http://docs.python.org/3.3/tutorial/.

Enter the name of any module, keyword, or topic to get help on writing
Python programs and using Python modules.  To quit this help utility and
return to the interpreter, just type "quit".

To get a list of available modules, keywords, or topics, type "modules",
"keywords", or "topics".  Each module also comes with a one-line summary
of what it does; to list the modules whose summaries contain a given word
such as "spam", type "modules spam".

help> 

You are now leaving help and returning to the Python interpreter.
If you want to ask for help on a particular object directly from the
interpreter, you can type "help(object)".  Executing "help('string')"
has the same effect as typing a particular string at the help> prompt.
>>> help(print)

>>> help(math)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'math' is not defined
>>> import math
>>> help(math)

>>> math.sin(math.pi)
1.2246467991473532e-16
>>> 2**20
1048576
>>> math.pi
3.141592653589793
>>> math.sin(90)
0.8939966636005579
>>> math.cos(math.pi)
-1.0
>>> 
